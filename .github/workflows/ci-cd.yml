name: Kuchisabishii CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
  SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

jobs:
  # Static Analysis and Code Quality
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: TypeScript type checking
      run: npm run type-check
      
    - name: ESLint analysis
      run: npm run lint
      
    - name: Security audit
      run: npm audit --audit-level=high
      
    - name: Check bundle sizes
      run: |
        cd web && npm run build
        cd ../mobile && npm run web
        
    - name: Upload bundle analysis
      uses: actions/upload-artifact@v3
      with:
        name: bundle-analysis
        path: |
          web/.next/analyze/
          mobile/web-build/static/

  # Unit and Integration Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: kuchisabishii_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Start Supabase local development
      run: supabase start
      
    - name: Run shared module tests
      run: cd shared && npm run test:coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/kuchisabishii_test
        
    - name: Run integration tests
      run: npm run test:integration
      env:
        VITE_SUPABASE_URL: http://localhost:54321
        VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY_TEST }}
        
    - name: Run emotional rating system tests
      run: npm run test tests/integration/emotional-rating-e2e.test.ts
      
    - name: Run performance benchmark tests
      run: npm run test tests/performance/recommendation-engine-benchmark.test.ts
      
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./shared/coverage/lcov.info
        flags: unittests
        name: kuchisabishii-coverage

  # Accessibility Testing
  accessibility:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run WCAG compliance tests
      run: npm run test tests/accessibility/wcag-compliance.test.ts
      
    - name: Build web app for accessibility testing
      run: cd web && npm run build
      
    - name: Run axe-core accessibility tests
      run: |
        cd web && npm start &
        sleep 30
        npx axe-cli http://localhost:3000 --exit
        
    - name: Upload accessibility results
      uses: actions/upload-artifact@v3
      with:
        name: accessibility-results
        path: accessibility-results.json

  # Cross-Platform Build Testing
  build-mobile:
    name: Mobile Build (iOS/Android)
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Expo CLI
      run: npm install -g @expo/cli
      
    - name: Build shared module
      run: cd shared && npm run build
      
    - name: Build mobile app (development)
      run: cd mobile && npx expo export --platform all
      env:
        EXPO_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL_STAGING }}
        EXPO_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY_STAGING }}
        
    - name: Upload mobile build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: mobile-build
        path: mobile/dist/

  build-web:
    name: Web Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build shared module
      run: cd shared && npm run build
      
    - name: Build web app
      run: cd web && npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL_STAGING }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY_STAGING }}
        
    - name: Upload web build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: web-build
        path: web/.next/

  # Database Migration Testing
  database-migrations:
    name: Database Migrations
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: kuchisabishii_migrations
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Test database migrations
      run: |
        supabase init
        supabase db reset --linked=false
        supabase db diff --linked=false
        
    - name: Validate emotional rating functions
      run: |
        supabase db test --linked=false
        
    - name: Check RLS policies
      run: |
        supabase db lint --linked=false

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run OWASP dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'kuchisabishii'
        path: '.'
        format: 'JSON'
        
    - name: Upload OWASP results
      uses: actions/upload-artifact@v3
      with:
        name: owasp-results
        path: reports/

  # Deployment to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [code-quality, test, accessibility, build-mobile, build-web, database-migrations, security]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.kuchisabishii.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Download web build artifacts
      uses: actions/download-artifact@v3
      with:
        name: web-build
        path: web/.next/
        
    - name: Deploy to Vercel (Staging)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./web
        scope: ${{ secrets.VERCEL_ORG_ID }}
        
    - name: Update Supabase staging
      run: |
        supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID_STAGING }}
        supabase db push
        supabase functions deploy
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        
    - name: Deploy mobile to Expo (Preview)
      run: |
        cd mobile
        npx expo publish --release-channel staging
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [code-quality, test, accessibility, build-mobile, build-web, database-migrations, security]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://kuchisabishii.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Download web build artifacts
      uses: actions/download-artifact@v3
      with:
        name: web-build
        path: web/.next/
        
    - name: Deploy to Vercel (Production)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./web
        scope: ${{ secrets.VERCEL_ORG_ID }}
        
    - name: Update Supabase production
      run: |
        supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID_PRODUCTION }}
        supabase db push
        supabase functions deploy
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        
    - name: Deploy mobile to App Stores
      run: |
        cd mobile
        npx expo build:ios --release-channel production
        npx expo build:android --release-channel production
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        EXPO_APPLE_ID: ${{ secrets.EXPO_APPLE_ID }}
        EXPO_APPLE_ID_PASSWORD: ${{ secrets.EXPO_APPLE_ID_PASSWORD }}
        
    - name: Send deployment notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          🚀 Kuchisabishii has been deployed to production!
          🌐 Web: https://kuchisabishii.com
          📱 Mobile: Available on App Store & Google Play
          
  # Post-deployment health checks
  health-check:
    name: Post-deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Health check - Web
      run: |
        curl -f https://kuchisabishii.com/api/health || exit 1
        
    - name: Health check - Database
      run: |
        curl -f https://kuchisabishii.com/api/health/database || exit 1
        
    - name: Health check - Recommendations
      run: |
        curl -f https://kuchisabishii.com/api/health/recommendations || exit 1
        
    - name: Notify on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          🚨 Post-deployment health checks failed!
          Please investigate immediately.